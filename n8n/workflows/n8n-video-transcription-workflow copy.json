{
  "nodes": [
    {
      "parameters": {
        "path": "list-videos",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -160,
        432
      ],
      "id": "eef13f34-4c2d-4cc7-baf1-fb1bcc199785",
      "name": "List Videos Webhook",
      "webhookId": "list-videos-webhook-id"
    },
    {
      "parameters": {
        "command": "find /nas/PeggysExtraStorage/videos-to-process -maxdepth 1 -type f \\( -iname '*.mp4' -o -iname '*.mov' -o -iname '*.avi' -o -iname '*.mkv' \\) -exec sh -c 'for f; do printf \"%s|%s|%s\\n\" \"$(basename \"$f\")\" \"$f\" \"$(stat -c %s \"$f\")\"; done' sh {} +"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        48,
        432
      ],
      "id": "30646144-563e-4f27-87f6-6c1225eb65a1",
      "name": "List Video Files"
    },
    {
      "parameters": {
        "jsCode": "const output = $input.first().json.stdout;\nconst lines = output.trim().split('\\n').filter(line => line.length > 0);\n\n// Helper function to convert bytes to human-readable format\nfunction formatBytes(bytes) {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n}\n\nconst videos = lines.map(line => {\n  const [filename, filepath, sizeBytes] = line.split('|');\n  return {\n    filename: filename,\n    filepath: filepath,\n    size: formatBytes(parseInt(sizeBytes))\n  };\n});\n\nreturn [{\n  json: {\n    videos: videos\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        432
      ],
      "id": "9d8245ca-4a61-4382-a1aa-c8b9cdf41f90",
      "name": "Parse File List"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        448,
        432
      ],
      "id": "23862a0b-f89f-49c3-9cc7-dfd20c605b98",
      "name": "Return Video List"
    },
    {
      "parameters": {
        "path": "list-processed",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -160,
        128
      ],
      "id": "82bf0777-952f-4164-a456-c816d0140604",
      "name": "List Processed Webhook",
      "webhookId": "list-processed-webhook-id"
    },
    {
      "parameters": {
        "command": "find /nas/PeggysExtraStorage/videos-to-process/processed -type f \\( -iname '*.mp4' -o -iname '*.mov' -o -iname '*.avi' -o -iname '*.mkv' \\) -exec sh -c 'for f; do basename=\"$(basename \"$f\" | sed \"s/\\.[^.]*$//\")\"; printf \"%s|%s|%s\\n\" \"$(basename \"$f\")\" \"$f\" \"$(stat -c %s \"$f\")\"; done' sh {} +"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        48,
        128
      ],
      "id": "5142e296-7d1f-41d0-8260-2dd1a1c35a6f",
      "name": "List Processed Files"
    },
    {
      "parameters": {
        "jsCode": "const output = $input.first().json.stdout;\nconst lines = output.trim().split('\\n').filter(line => line.length > 0);\n\n// Helper function to convert bytes to human-readable format\nfunction formatBytes(bytes) {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n}\n\nconst processed = lines.map(line => {\n  const [filename, filepath, sizeBytes] = line.split('|');\n  // Remove file extension to get base name for transcription files\n  const baseName = filename.replace(/\\.[^.]+$/, '');\n  const processedDir = '/nas/PeggysExtraStorage/videos-to-process/processed';\n  \n  return {\n    video_filename: filename,\n    video_filepath: filepath,\n    video_size: formatBytes(parseInt(sizeBytes)),\n    base_name: baseName,\n    transcription_files: {\n      txt: `${processedDir}/${baseName}.txt`,\n      srt: `${processedDir}/${baseName}.srt`,\n      json: `${processedDir}/${baseName}.json`\n    }\n  };\n});\n\nreturn [{\n  json: {\n    processed_videos: processed\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        128
      ],
      "id": "9d9c0227-daf8-4767-bce0-41980b4104af",
      "name": "Parse Processed List"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        448,
        128
      ],
      "id": "49d0d002-ad21-48e9-abed-c63caaabb4b5",
      "name": "Return Processed List"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-video-file",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -160,
        736
      ],
      "id": "02ebf8d1-68dd-44cf-a847-0ebfa7418e3d",
      "name": "Process Video Webhook",
      "webhookId": "process-video-webhook-id"
    },
    {
      "parameters": {
        "jsCode": "// Extract job configuration and callback URL\nconst webhookData = $input.first().json;\nconst filepath = webhookData.body.filepath;\nconst callbackUrl = webhookData.body.callback_url;\nconst jobId = $execution.id;\n\nreturn [{\n  json: {\n    job_id: jobId,\n    filepath: filepath,\n    callback_url: callbackUrl || null,\n    start_time: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        48,
        736
      ],
      "id": "3378f2d2-7f75-4954-8734-5b8eb8d6420e",
      "name": "Initialize Job"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"job_id\": \"{{ $json.job_id }}\", \"status\": \"processing\", \"message\": \"Video transcription started\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        240,
        608
      ],
      "id": "8636d210-5881-45b4-9db1-e0da63d0f011",
      "name": "Respond with Job ID"
    },
    {
      "parameters": {
        "filePath": "={{ $('Initialize Job').item.json.filepath }}"
      },
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        240,
        848
      ],
      "id": "6d73081d-aa6d-468f-a70c-17ad41523d6e",
      "name": "Read Video from NAS"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"processing\", \"progress\": 10, \"stage\": \"loading\", \"message\": \"Video file loaded from NAS\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        448,
        848
      ],
      "id": "ebb7596c-545c-4d04-81d3-a360c10ef087",
      "name": "Progress 10%"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"processing\", \"progress\": 20, \"stage\": \"transcription\", \"message\": \"Starting audio transcription (this may take several minutes)...\", \"eta_seconds\": 400 }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        640,
        848
      ],
      "id": "1fb74f58-857a-4363-8a2a-1c08ffc924ed",
      "name": "Progress 20%"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://whisperx:8000/transcribe-large",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "callback_url",
              "value": "={{ $('Initialize Job').item.json.callback_url }}"
            },
            {
              "name": "job_id",
              "value": "={{ $('Initialize Job').item.json.job_id }}"
            }
          ]
        },
        "options": {
          "timeout": 1800000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        832,
        848
      ],
      "id": "799e73d1-78ed-4724-a890-ff114a29e24e",
      "name": "Send to WhisperX"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"processing\", \"progress\": 87, \"stage\": \"finalization\", \"message\": \"Transcription complete, processing results...\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1024,
        848
      ],
      "id": "d60236c9-9300-40d4-8923-45567a0160f6",
      "name": "Progress 87%"
    },
    {
      "parameters": {
        "command": "mkdir -p /nas/PeggysExtraStorage/videos-to-process/processed"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1216,
        848
      ],
      "id": "92c76bad-9043-4999-b856-704c17356603",
      "name": "Create Directory"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"processing\", \"progress\": 88, \"stage\": \"finalization\", \"message\": \"Formatting transcription data...\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1408,
        848
      ],
      "id": "ff0eb1b6-6707-4295-927d-061bf62cabaa",
      "name": "Progress 88%"
    },
    {
      "parameters": {
        "jsCode": "// Get transcription data from HTTP Request response\nconst transcriptionData = $('Send to WhisperX').first().json;\n\n// Extract the first element if it's an array\nconst data = Array.isArray(transcriptionData) ? transcriptionData[0] : transcriptionData;\n\n// Get the original filename from the webhook input\nconst originalPath = $('Initialize Job').first().json.filepath;\nconst originalFilename = originalPath.split('/').pop();\n\n// Remove file extension and sanitize filename\nconst cleanFilename = originalFilename.replace(/\\.[^/.]+$/, '').replace(/[^a-zA-Z0-9-_]/g, '_');\n\n// Helper function to format time as HH:MM:SS,mmm\nfunction formatSRTTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  const milliseconds = Math.floor((seconds % 1) * 1000);\n  \n  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')},${String(milliseconds).padStart(3, '0')}`;\n}\n\n// Generate plain text transcript\nlet plainText = '';\nif (data.segments) {\n  plainText = data.segments.map(seg => seg.text.trim()).join('\\n\\n');\n}\n\n// Generate SRT subtitle format\nlet srtContent = '';\nif (data.segments) {\n  data.segments.forEach((segment, index) => {\n    const startTime = formatSRTTime(segment.start);\n    const endTime = formatSRTTime(segment.end);\n    srtContent += `${index + 1}\\n${startTime} --> ${endTime}\\n${segment.text.trim()}\\n\\n`;\n  });\n}\n\n// Output single item with all content\nreturn [{\n  json: {\n    filename: cleanFilename,\n    txtContent: plainText,\n    srtContent: srtContent,\n    jsonContent: JSON.stringify(data, null, 2)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        848
      ],
      "id": "f162f0d4-a941-4014-9f4c-c9db47af973e",
      "name": "Process Transcription Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"processing\", \"progress\": 90, \"stage\": \"finalization\", \"message\": \"Saving transcription files...\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1792,
        848
      ],
      "id": "6d42c6b6-ccee-40ae-ab44-313c5f9a2014",
      "name": "Progress 90%"
    },
    {
      "parameters": {
        "jsCode": "const item = $('Process Transcription Data').first().json;\nconst buffer = Buffer.from(item.txtContent, 'utf-8');\nreturn [{\n  json: { filename: item.filename },\n  binary: {\n    data: {\n      data: buffer.toString('base64'),\n      mimeType: 'text/plain',\n      fileName: `${item.filename}.txt`,\n      fileExtension: 'txt'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        688
      ],
      "id": "c0a095e3-bc33-45e2-a279-1d2bdd95e112",
      "name": "Prepare TXT"
    },
    {
      "parameters": {
        "jsCode": "const item = $('Process Transcription Data').first().json;\nconst buffer = Buffer.from(item.srtContent, 'utf-8');\nreturn [{\n  json: { filename: item.filename },\n  binary: {\n    data: {\n      data: buffer.toString('base64'),\n      mimeType: 'text/plain',\n      fileName: `${item.filename}.srt`,\n      fileExtension: 'srt'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        848
      ],
      "id": "d8017c13-ac3b-4854-a9e9-dec90d42beaa",
      "name": "Prepare SRT"
    },
    {
      "parameters": {
        "jsCode": "const item = $('Process Transcription Data').first().json;\nconst buffer = Buffer.from(item.jsonContent, 'utf-8');\nreturn [{\n  json: { filename: item.filename },\n  binary: {\n    data: {\n      data: buffer.toString('base64'),\n      mimeType: 'application/json',\n      fileName: `${item.filename}.json`,\n      fileExtension: 'json'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        1008
      ],
      "id": "d7d7c38e-1929-49e4-a2a1-5e1f181a3161",
      "name": "Prepare JSON"
    },
    {
      "parameters": {
        "fileName": "=/nas/PeggysExtraStorage/videos-to-process/processed/{{ $json.filename }}.txt",
        "options": {}
      },
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        2176,
        688
      ],
      "id": "6de3bc26-206a-49f6-9673-44fccb045efb",
      "name": "Save Plain Text"
    },
    {
      "parameters": {
        "fileName": "=/nas/PeggysExtraStorage/videos-to-process/processed/{{ $json.filename }}.srt",
        "options": {}
      },
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        2176,
        848
      ],
      "id": "ba6f2f32-4b93-4a02-a0ea-c428955c5f88",
      "name": "Save SRT Subtitles"
    },
    {
      "parameters": {
        "fileName": "=/nas/PeggysExtraStorage/videos-to-process/processed/{{ $json.filename }}.json",
        "options": {}
      },
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        2176,
        1008
      ],
      "id": "40accd46-0c26-4283-95a4-596adb218c02",
      "name": "Save JSON Timing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"processing\", \"progress\": 95, \"stage\": \"finalization\", \"message\": \"Moving video file to processed folder...\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2560,
        848
      ],
      "id": "0c742386-6284-4b9a-b236-8a67ac31e821",
      "name": "Progress 95%"
    },
    {
      "parameters": {
        "command": "=mv \"{{ $('Initialize Job').item.json.filepath }}\" \"/nas/PeggysExtraStorage/videos-to-process/processed/$(basename \"{{ $('Initialize Job').item.json.filepath }}\")\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2752,
        848
      ],
      "id": "550d7e1a-5653-43e3-aa0a-d4d0effebf11",
      "name": "Move Video to Processed"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Initialize Job').item.json.callback_url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"job_id\": \"{{ $('Initialize Job').item.json.job_id }}\", \"status\": \"complete\", \"progress\": 100, \"stage\": \"complete\", \"message\": \"Transcription completed successfully\", \"result\": { \"filename\": \"{{ $('Process Transcription Data').first().json.filename }}\", \"files\": { \"txt\": \"/nas/PeggysExtraStorage/videos-to-process/processed/{{ $('Process Transcription Data').first().json.filename }}.txt\", \"srt\": \"/nas/PeggysExtraStorage/videos-to-process/processed/{{ $('Process Transcription Data').first().json.filename }}.srt\", \"json\": \"/nas/PeggysExtraStorage/videos-to-process/processed/{{ $('Process Transcription Data').first().json.filename }}.json\" } } }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2944,
        848
      ],
      "id": "de014586-4978-4a39-8055-40b187837b2c",
      "name": "Completion Callback"
    }
  ],
  "connections": {
    "List Videos Webhook": {
      "main": [
        [
          {
            "node": "List Video Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Video Files": {
      "main": [
        [
          {
            "node": "Parse File List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse File List": {
      "main": [
        [
          {
            "node": "Return Video List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Processed Webhook": {
      "main": [
        [
          {
            "node": "List Processed Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Processed Files": {
      "main": [
        [
          {
            "node": "Parse Processed List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Processed List": {
      "main": [
        [
          {
            "node": "Return Processed List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Video Webhook": {
      "main": [
        [
          {
            "node": "Initialize Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Job": {
      "main": [
        [
          {
            "node": "Respond with Job ID",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read Video from NAS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Video from NAS": {
      "main": [
        [
          {
            "node": "Send to WhisperX",
            "type": "main",
            "index": 0
          },
          {
            "node": "Progress 10%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Progress 10%": {
      "main": [
        [
          {
            "node": "Progress 20%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to WhisperX": {
      "main": [
        [
          {
            "node": "Progress 87%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Progress 87%": {
      "main": [
        [
          {
            "node": "Create Directory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Directory": {
      "main": [
        [
          {
            "node": "Progress 88%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Progress 88%": {
      "main": [
        [
          {
            "node": "Process Transcription Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Transcription Data": {
      "main": [
        [
          {
            "node": "Progress 90%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Progress 90%": {
      "main": [
        [
          {
            "node": "Prepare TXT",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare SRT",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare TXT": {
      "main": [
        [
          {
            "node": "Save Plain Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare SRT": {
      "main": [
        [
          {
            "node": "Save SRT Subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare JSON": {
      "main": [
        [
          {
            "node": "Save JSON Timing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Plain Text": {
      "main": [
        [
          {
            "node": "Progress 95%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save SRT Subtitles": {
      "main": [
        [
          {
            "node": "Progress 95%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save JSON Timing": {
      "main": [
        [
          {
            "node": "Progress 95%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Progress 95%": {
      "main": [
        [
          {
            "node": "Move Video to Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Video to Processed": {
      "main": [
        [
          {
            "node": "Completion Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "99ff97a0c56026a2c1b3a849547491eb857e68a0b770f2b7c6688eea83f57eda"
  }
}