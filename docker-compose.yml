volumes:
  n8n_storage:
  qdrant_storage:
  open-webui:
  flowise:
  traefik-certs:

networks:
  localai_default:
    name: localai_default
    external: true

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET

# x-ollama: &service-ollama
#   image: ollama/ollama:latest
#   container_name: ollama
#   restart: unless-stopped
#   expose:
#     - 11434
#   networks:
#     - localai_default
#   volumes:
#     - ollama_storage:/root/.ollama

# x-init-ollama: &init-ollama
#   image: ollama/ollama:latest
#   container_name: ollama-pull-llama
#   volumes:
#     - ollama_storage:/root/.ollama
#   entrypoint: /bin/sh
#   command:
#     - "-c"
#     - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs:ro
    networks:
      - localai_default
    depends_on:
      - n8n
      - flowise
      - open-webui
      - qdrant
      - kokoro-fastapi-gpu

  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
    expose:
        - 3001
    networks:
        - localai_default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    expose:
      - 8080
    networks:
      - localai_default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
    environment:
      - AUDIO_TTS_URL=http://kokoro-fastapi-gpu:8880

  kokoro-fastapi-gpu:
    expose:
      - 8880
    image: ghcr.io/remsky/kokoro-fastapi-gpu:latest
    restart: always
    networks:
      - localai_default
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities:
                - gpu

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678
    networks:
      - localai_default
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    expose:
      - 6333
    networks:
      - localai_default
    volumes:
      - qdrant_storage:/qdrant/storage

  # ollama-cpu:
  #   profiles: ["cpu"]
  #   <<: *service-ollama

  # ollama-gpu:
  #   profiles: ["gpu-nvidia"]
  #   <<: *service-ollama
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]

  # ollama-gpu-amd:
  #   profiles: ["gpu-amd"]
  #   <<: *service-ollama
  #   image: ollama/ollama:rocm
  #   devices:
  #     - "/dev/kfd"
  #     - "/dev/dri"

  # ollama-pull-llama-cpu:
  #   profiles: ["cpu"]
  #   <<: *init-ollama
  #   depends_on:
  #     - ollama-cpu

  # ollama-pull-llama-gpu:
  #   profiles: ["gpu-nvidia"]
  #   <<: *init-ollama
  #   depends_on:
  #     - ollama-gpu

  # ollama-pull-llama-gpu-amd:
  #   profiles: [gpu-amd]
  #   <<: *init-ollama
  #   image: ollama/ollama:rocm
  #   depends_on:
  #    - ollama-gpu-amd
