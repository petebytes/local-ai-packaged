volumes:
  n8n_storage:
    driver: local
  open-webui:
    driver: local
  traefik-certs:
    driver: local
  nocodb:
    driver: local
  postgres_data:
    driver: local
  backup_data:
    driver: local
  n8n-certs:
    driver: local
  whisperx-cache:
    driver: local
  registry-cache:
    driver: local
  # Shared AI model caches - reduces downloads across services
  hf-cache:
    driver: local
  torch-cache:
    driver: local
  comfyui-models:
    driver: local
  # Virtual Assistant volumes
  va-riva-cache:
    driver: local
  va-riva-tts-cache:
    driver: local
  va-audio2face-data:
    driver: local
  va-audio2face-models:
    driver: local

networks:
  localai_default:
    driver: bridge

x-n8n: &service-n8n
  build:
    context: ./n8n-custom
    dockerfile: Dockerfile
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
    - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET


services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs:ro
      - ./www:/usr/share/nginx/html:ro
    networks:
      - localai_default
    # No depends_on - nginx should always be available even if backend services fail

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    expose:
      - 8080
    networks:
      - localai_default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
    environment:
      - AUDIO_TTS_URL=http://kokoro-fastapi-gpu:8880

  kokoro-fastapi-gpu:
    build:
      context: ./kokoro-build
      dockerfile: docker/gpu/Dockerfile.rtx5090
      args:
        CUDA_VERSION: "12.8"  # RTX 5090 requires CUDA 12.8 with PyTorch 2.7.1+cu128
    expose:
      - 8880
    restart: always
    networks:
      - localai_default
    volumes:
      # Shared cache volumes - prevent re-downloading models
      - hf-cache:/data/.huggingface
      - torch-cache:/data/.torch
    environment:
      - PYTHONPATH=/app:/app/api
      - USE_GPU=true
      - PYTHONUNBUFFERED=1
      # Cache optimization
      - HF_HOME=/data/.huggingface
      - TORCH_HOME=/data/.torch
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1  # Single RTX 5090
              capabilities:
                - gpu

  crawl4ai:
    image: unclecode/crawl4ai:gpu-amd64 # Official GPU-enabled AMD64 image from Docker Hub
    # image: crawl4ai:latest # Use this if you build locally with GPU support
    container_name: crawl4ai
    restart: unless-stopped
    pull_policy: if_not_present # Pull from Docker Hub if not available locally
    expose:
      - 8000 # Expose port internally for nginx proxy
    networks:
      - localai_default
    volumes:
      # Shared cache volumes
      - hf-cache:/data/.huggingface
      - torch-cache:/data/.torch
    environment:
      # Define API keys in your .env file or uncomment and set here
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      # Ensure the server runs on 0.0.0.0 to be accessible within the network
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - CRAWL4AI_API_KEY=${CRAWL4AI_API_KEY:-}
      # RTX 5090 GPU optimizations
      - MAX_CONCURRENT_TASKS=8  # Increased for RTX 5090 performance
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True
      # Cache optimization
      - HF_HOME=/data/.huggingface
      - TORCH_HOME=/data/.torch
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1  # Single RTX 5090
              capabilities: [gpu]

  whisperx:
    build:
      context: ./whisperx
      dockerfile: Dockerfile
      args:
        CUDA_VERSION: "12.8"  # RTX 5090 requires CUDA 12.8 with PyTorch 2.7.1+cu128
    container_name: whisperx
    restart: unless-stopped
    expose:
      - 8000
    networks:
      - localai_default
    volumes:
      - whisperx-cache:/root/.cache
      - ./shared:/app/shared
      - ./whisperx:/app  # Mount source code for faster development iteration
      # Shared cache volumes - prevent re-downloading models
      - hf-cache:/data/.huggingface
      - torch-cache:/data/.torch
    environment:
      - COMPUTE_TYPE=float16
      - BATCH_SIZE=32  # Increased for RTX 5090's 32GB VRAM and faster memory bandwidth
      - HF_TOKEN=${HF_TOKEN:-}
      - LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}
      # Cache optimization - share models across services
      - HF_HOME=/data/.huggingface
      - TRANSFORMERS_CACHE=/data/.huggingface/transformers
      - TORCH_HOME=/data/.torch
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1  # Single RTX 5090
              capabilities: [gpu]

  progress-tracker:
    image: python:3.11-alpine
    container_name: progress-tracker
    restart: unless-stopped
    expose:
      - 5555
    networks:
      - localai_default
    volumes:
      - ./www/progress_tracker.py:/app.py:ro
    command: >
      /bin/sh -c "
        pip install --no-cache-dir flask flask-cors &&
        python /app.py"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5555/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3

  comfyui:
    image: ghcr.io/ai-dock/comfyui:latest
    container_name: comfyui
    restart: unless-stopped
    expose:
      - 8188
    networks:
      - localai_default
    volumes:
      - ./ComfyUI:/workspace/ComfyUI
      - ./shared:/app/shared
      # Persistent model storage - prevents re-downloading large SD models
      - comfyui-models:/workspace/ComfyUI/models
      # Shared cache volumes
      - hf-cache:/data/.huggingface
      - torch-cache:/data/.torch
    environment:
      - NVIDIA_VISIBLE_DEVICES=0  # Single RTX 5090 (device 0)
      - COMFYUI_ARGS=--use-sage-attention --fast  # RTX 5090 optimizations
      - PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True  # Better VRAM management
      # Cache optimization
      - HF_HOME=/data/.huggingface
      - TORCH_HOME=/data/.torch
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1  # Single RTX 5090
              capabilities: [gpu]

  # infinitetalk:
  #   build:
  #     context: /home/ghar/code/InfiniteTalk
  #     dockerfile: /home/ghar/code/local-ai-packaged/infinitetalk/Dockerfile
  #   container_name: infinitetalk
  #   restart: unless-stopped
  #   expose:
  #     - 8418
  #   networks:
  #     - localai_default
  #   volumes:
  #     - /home/ghar/code/InfiniteTalk:/app
  #     - ./shared:/app/shared
  #     # Shared cache volumes
  #     - hf-cache:/data/.huggingface
  #     - torch-cache:/data/.torch
  #   environment:
  #     - NVIDIA_VISIBLE_DEVICES=0  # Single RTX 5090
  #     - PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True  # Better VRAM management
  #     # Cache optimization
  #     - HF_HOME=/data/.huggingface
  #     - TORCH_HOME=/data/.torch
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1  # Single RTX 5090
  #             capabilities: [gpu]


  # n8n-import:
  #   <<: *service-n8n
  #   container_name: n8n-import
  #   entrypoint: /bin/sh
  #   command:
  #     - "-c"
  #     - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
  #   volumes:
  #     - ./n8n/backup:/backup

  n8n-cert-init:
    image: alpine:latest
    container_name: n8n-cert-init
    volumes:
      - ./certs:/certs-src:ro
      - n8n-certs:/certs-dest
    command: sh -c "cp -v /certs-src/* /certs-dest/ && chown -R 1000:1000 /certs-dest && echo 'Certs copied and permissions set.'"
    # This container runs once and exits

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678
    networks:
      - localai_default
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - /mnt/nas:/nas
      - n8n-certs:/opt/custom-certificates:ro # Mount the prepared named volume
    environment:
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - NODE_EXTRA_CA_CERTS=/opt/custom-certificates/local-cert.pem
      - WEBHOOK_URL=https://n8n.lan
      - N8N_HOST=n8n.lan
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - N8N_EDITOR_BASE_URL=https://n8n.lan
      - N8N_PAYLOAD_SIZE_MAX=2147483648
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_FORM_TRIGGER_MAX_PAYLOAD_SIZE=2147483648
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
    depends_on:
      - n8n-cert-init # Ensure certs are ready before n8n starts

    # depends_on:
    #   - n8n-import

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - localai_default
    volumes:
      - nocodb:/usr/app/data/
    environment:
      - NC_DB=pg://${POSTGRES_HOST}:${POSTGRES_PORT}?u=postgres&p=${POSTGRES_PASSWORD}&d=${POSTGRES_DB}
      - NC_AUTH_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    depends_on:
      - n8n

  backup:
    image: offen/docker-volume-backup:v2
    container_name: backup
    restart: unless-stopped
    env_file: .env
    volumes:
      - backup_data:/backup
      - n8n_storage:/backup-src/n8n:ro
      - open-webui:/backup-src/open-webui:ro
      - nocodb:/backup-src/nocodb:ro
    environment:
      - BACKUP_CRON_EXPRESSION=0 0 * * * # Every day at midnight
      - BACKUP_FILENAME=backup-%Y-%m-%d-%H-%M-%S.tar.gz
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_COMPRESSION_LEVEL=9
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_POSTGRES_ENABLED=true
      - BACKUP_STOP_CONTAINERS=false
      - BACKUP_DELETE_ONLY_IF_NEW_BACKUP_PRESENT=true
      - TZ=UTC
    networks:
      - localai_default

  service-status:
    image: alpine:latest
    container_name: service-status
    restart: unless-stopped
    volumes:
      - backup_data:/backup:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./service-status.py:/app.py:ro
    networks:
      - localai_default
    expose:
      - 80
    command: >
      /bin/sh -c "
        apk add --no-cache python3 py3-pip curl jq &&
        python3 -m venv /venv &&
        . /venv/bin/activate &&
        pip install --no-cache-dir flask flask-cors &&
        python /app.py"

  # Docker Registry Pull-Through Cache
  # Caches all pulled Docker images locally to speed up rebuilds
  # Configure Docker daemon to use this cache: /etc/docker/daemon.json
  # { "registry-mirrors": ["http://localhost:5000"] }
  registry-cache:
    image: registry:2
    container_name: registry-cache
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      REGISTRY_PROXY_REMOTEURL: https://registry-1.docker.io
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_STORAGE_DELETE_ENABLED: "true"
    volumes:
      - registry-cache:/var/lib/registry
    networks:
      - localai_default

  # Virtual Assistant - Web Interface
  virtual-assistant-web:
    build:
      context: ./virtual-assistant
      dockerfile: Dockerfile
    container_name: virtual-assistant-web
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - localai_default
    volumes:
      - ./virtual-assistant:/app
      - ./virtual-assistant/shared:/app/shared
      # Shared cache volumes
      - hf-cache:/data/.huggingface
      - torch-cache:/data/.torch
    environment:
      - RIVA_ASR_URL=riva-asr:50051
      - RIVA_TTS_URL=riva-tts:50052
      - AUDIO2FACE_URL=http://audio2face:8000
      - HF_HOME=/data/.huggingface
      - TORCH_HOME=/data/.torch
    depends_on:
      - riva-asr
      - riva-tts
      - audio2face
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NVIDIA Riva ASR - Speech Recognition
  riva-asr:
    image: nvcr.io/nim/nvidia/parakeet-ctc-1.1b-asr:latest
    container_name: riva-asr
    runtime: nvidia
    shm_size: '8gb'
    restart: unless-stopped
    expose:
      - 9000
      - 50051
    networks:
      - localai_default
    volumes:
      - va-riva-cache:/opt/nim/.cache
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - NGC_API_KEY=${NGC_API_KEY}
      - NIM_HTTP_API_PORT=9000
      - NIM_GRPC_API_PORT=50051
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 600s

  # NVIDIA Riva TTS - Text-to-Speech
  riva-tts:
    image: nvcr.io/nim/nvidia/fastpitch-hifigan-tts:latest
    container_name: riva-tts
    runtime: nvidia
    shm_size: '8gb'
    restart: unless-stopped
    expose:
      - 9001
      - 50052
    networks:
      - localai_default
    volumes:
      - va-riva-tts-cache:/opt/nim/.cache
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - NGC_API_KEY=${NGC_API_KEY}
      - NIM_HTTP_API_PORT=9001
      - NIM_GRPC_API_PORT=50052
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 600s

  # NVIDIA Audio2Face - Avatar Animation
  audio2face:
    image: nvcr.io/nim/nvidia/audio2face-3d:1.3.16
    container_name: audio2face
    runtime: nvidia
    restart: unless-stopped
    expose:
      - 8000
    networks:
      - localai_default
    volumes:
      - va-audio2face-data:/data
      - va-audio2face-models:/models
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - NGC_API_KEY=${NGC_API_KEY}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
