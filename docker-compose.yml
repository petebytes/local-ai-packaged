volumes:
  n8n_storage:
    driver: local
  open-webui:
    driver: local
  traefik-certs:
    driver: local
  nocodb:
    driver: local
  postgres_data:
    driver: local
  backup_data:
    driver: local
  n8n-certs:
    driver: local
  whisperx-cache:
    driver: local

networks:
  localai_default:
    name: localai_default
    external: true

x-n8n: &service-n8n
  build:
    context: ./n8n-custom
    dockerfile: Dockerfile
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
    - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET


services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs:ro
      - ./www:/usr/share/nginx/html:ro
    networks:
      - localai_default
    depends_on:
      - n8n
      - open-webui
      - kokoro-fastapi-gpu
      - nocodb
      - crawl4ai
      - whisperx
      - comfyui
      - infinitetalk

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    expose:
      - 8080
    networks:
      - localai_default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
    environment:
      - AUDIO_TTS_URL=http://kokoro-fastapi-gpu:8880

  kokoro-fastapi-gpu:
    expose:
      - 8880
    image: ghcr.io/remsky/kokoro-fastapi-gpu:v0.2.2
    restart: always
    networks:
      - localai_default
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities:
                - gpu

  crawl4ai:
    # image: unclecode/crawl4ai:basic
    image: crawl4ai:latest # Assumes a local image named 'crawl4ai' is built
    container_name: crawl4ai
    restart: unless-stopped
    pull_policy: never # Don't attempt to pull this image from a remote registry
    expose:
      - 8000 # Expose port internally for nginx proxy
    networks:
      - localai_default
    environment:
      # Define API keys in your .env file or uncomment and set here
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      # Ensure the server runs on 0.0.0.0 to be accessible within the network
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - CRAWL4AI_API_KEY=${CRAWL4AI_API_KEY:-}
    # volumes:
    #   - ./crawl4ai/custom-config.yml:/app/config.yml # Optional: Mount custom config if needed
    #   - ./crawl4ai/.llm.env:/.llm.env # Optional: Mount env file directly
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all # Utilize all available GPUs
              capabilities: [gpu]

  whisperx:
    build:
      context: ./whisperx
      dockerfile: Dockerfile
    container_name: whisperx
    restart: unless-stopped
    expose:
      - 8000
    networks:
      - localai_default
    volumes:
      - whisperx-cache:/root/.cache
      - ./shared:/app/shared
    environment:
      - COMPUTE_TYPE=float16
      - BATCH_SIZE=16
      - HF_TOKEN=${HF_TOKEN:-}
      - LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  comfyui:
    image: ghcr.io/ai-dock/comfyui:latest
    container_name: comfyui
    restart: unless-stopped
    expose:
      - 8188
    networks:
      - localai_default
    volumes:
      - ./ComfyUI:/workspace/ComfyUI
      - ./shared:/app/shared
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  infinitetalk:
    build:
      context: /home/ghar/code/InfiniteTalk
      dockerfile: /home/ghar/code/local-ai-packaged/infinitetalk/Dockerfile
    container_name: infinitetalk
    restart: unless-stopped
    expose:
      - 8418
    networks:
      - localai_default
    volumes:
      - /home/ghar/code/InfiniteTalk:/app
      - ./shared:/app/shared
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]

  # n8n-import:
  #   <<: *service-n8n
  #   container_name: n8n-import
  #   entrypoint: /bin/sh
  #   command:
  #     - "-c"
  #     - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
  #   volumes:
  #     - ./n8n/backup:/backup

  n8n-cert-init:
    image: alpine:latest
    container_name: n8n-cert-init
    volumes:
      - ./certs:/certs-src:ro
      - n8n-certs:/certs-dest
    command: sh -c "cp -v /certs-src/* /certs-dest/ && chown -R 1000:1000 /certs-dest && echo 'Certs copied and permissions set.'"
    # This container runs once and exits

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678
    networks:
      - localai_default
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - /mnt/nas:/nas
      - n8n-certs:/opt/custom-certificates:ro # Mount the prepared named volume
    environment:
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - NODE_EXTRA_CA_CERTS=/opt/custom-certificates/local-cert.pem
      - WEBHOOK_URL=https://n8n.lan
      - N8N_HOST=n8n.lan
      - N8N_PROTOCOL=https
      - N8N_PORT=5678
      - N8N_EDITOR_BASE_URL=https://n8n.lan
      - N8N_PAYLOAD_SIZE_MAX=2147483648
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_FORM_TRIGGER_MAX_PAYLOAD_SIZE=2147483648
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
    depends_on:
      - n8n-cert-init # Ensure certs are ready before n8n starts

    # depends_on:
    #   - n8n-import

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - localai_default
    volumes:
      - nocodb:/usr/app/data/
    environment:
      - NC_DB=pg://${POSTGRES_HOST}:${POSTGRES_PORT}?u=postgres&p=${POSTGRES_PASSWORD}&d=${POSTGRES_DB}
      - NC_AUTH_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    depends_on:
      - n8n

  backup:
    image: offen/docker-volume-backup:v2
    container_name: backup
    restart: unless-stopped
    env_file: .env
    volumes:
      - backup_data:/backup
      - n8n_storage:/backup-src/n8n:ro
      - open-webui:/backup-src/open-webui:ro
      - nocodb:/backup-src/nocodb:ro
    environment:
      - BACKUP_CRON_EXPRESSION=0 0 * * * # Every day at midnight
      - BACKUP_FILENAME=backup-%Y-%m-%d-%H-%M-%S.tar.gz
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_COMPRESSION_LEVEL=9
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_POSTGRES_ENABLED=true
      - BACKUP_STOP_CONTAINERS=false
      - BACKUP_DELETE_ONLY_IF_NEW_BACKUP_PRESENT=true
      - TZ=UTC
    networks:
      - localai_default

  service-status:
    image: alpine:latest
    container_name: service-status
    restart: unless-stopped
    volumes:
      - backup_data:/backup:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./service-status.py:/app.py:ro
    networks:
      - localai_default
    expose:
      - 80
    command: >
      /bin/sh -c "
        apk add --no-cache python3 py3-pip curl jq &&
        python3 -m venv /venv &&
        . /venv/bin/activate &&
        pip install --no-cache-dir flask flask-cors &&
        python /app.py"
